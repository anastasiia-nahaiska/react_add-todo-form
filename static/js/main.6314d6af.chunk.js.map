{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","title","completed","id","cn","TodoList","todos","map","username","getUser","userId","usersFromServer","find","todoWithUser","App","useState","setTodos","selectedUserId","setSelectedUserId","setTitle","hasNoUserError","setHasNoUserError","hasNoTitleError","setHasNoTitleError","hasNoValidError","setHasNoValidError","hasOnlySpacesError","setHasOnlySpacesError","isValidTitle","text","test","action","method","htmlFor","type","value","placeholder","onChange","event","currentTarget","disabled","onClick","preventDefault","trim","newTodo","Math","max","currentTodos","addTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6314d6af.chunk.js","sourcesContent":["import { User } from '../../react-app-env';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { TodoWithUser } from '../../react-app-env';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    id,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../react-app-env';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoWithUser, User } from './react-app-env';\n\nconst getUser = (userId: number): User | null => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todoWithUser: TodoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(todoWithUser);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [hasNoUserError, setHasNoUserError] = useState(false);\n  const [hasNoTitleError, setHasNoTitleError] = useState(false);\n  const [hasNoValidError, setHasNoValidError] = useState(false);\n  const [hasOnlySpacesError, setHasOnlySpacesError] = useState(false);\n\n  const addTodo = () => {\n    const maxId = Math.max(...todos.map(todo => todo.id));\n    const newTodo = {\n      id: maxId + 1,\n      title,\n      completed: false,\n      userId: selectedUserId,\n      user: getUser(selectedUserId),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  const clearTitle = () => {\n    setTitle('');\n  };\n\n  const clearSelectedUserId = () => {\n    setSelectedUserId(0);\n  };\n\n  const clearErrors = () => {\n    setHasNoTitleError(false);\n    setHasNoValidError(false);\n    setHasOnlySpacesError(false);\n    setHasNoUserError(false);\n  };\n\n  const isValidTitle = (text: string) => {\n    const pattern = /[$&+,:;=?@#|â„–<>.\"_^*()%!]/g;\n\n    return !pattern.test(text);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.currentTarget.value);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n  };\n\n  const onSubmit = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    clearErrors();\n\n    if (title.trim() && selectedUserId && isValidTitle(title)) {\n      addTodo();\n      clearTitle();\n      clearSelectedUserId();\n    }\n\n    if (!title) {\n      setHasNoTitleError(true);\n    }\n\n    if (!isValidTitle(title)) {\n      setHasNoValidError(true);\n    }\n\n    if (!title.trim() && title) {\n      setHasOnlySpacesError(true);\n    }\n\n    if (!selectedUserId) {\n      setHasNoUserError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label htmlFor=\"createTitle\">\n            Tilte:&nbsp;\n          </label>\n\n          <input\n            id=\"createTitle\"\n            type=\"text\"\n            value={title}\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            onChange={handleInputChange}\n          />\n\n          {hasNoTitleError && (\n            <span className=\"error\">\n              &nbsp;Please enter a title &#128521;\n            </span>\n          )}\n\n          {hasNoValidError && (\n            <span className=\"error\">\n              &nbsp;The title can contain only letters,\n              numbers and spaces &#9757;\n            </span>\n          )}\n\n          {hasOnlySpacesError && (\n            <span className=\"error\">\n              &nbsp;The title cannot contain only spaces &#128575;\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"selectUser\">\n            User:&nbsp;\n          </label>\n\n          <select\n            id=\"selectUser\"\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={handleSelectChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {hasNoUserError && (\n            <span className=\"error\">\n              &nbsp;Please choose a user &#128521;\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={onSubmit}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}